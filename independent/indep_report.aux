\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}{section.1}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Interpolation Types}{1}{section.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {a}Linear Interpolation}{1}{subsection.2.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces We can calculate the value of $C=(x_2,y_2)$ using linear interpolation knowing the coordinates of $A=(x_0,y_0)$ and $B=(x_1,y_1)$.}}{2}{figure.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {a.1}Mathematical Approach}{2}{subsubsection.2.1.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {a.2}Example}{2}{subsubsection.2.1.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces The interpolated values from my code and scipy module are very similar that they go on top of one another. This is generated using 10 knots.}}{3}{figure.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces The interpolated values from my code and scipy module are very similar that they go on top of one another. This is similar to previous figure except this is with more knots. This has 20 knots compared to 10 in the previous figure. We can see that the interpolated curves are getting closer to the function.}}{3}{figure.3}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {a.3}Error Analysis}{4}{subsubsection.2.1.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {b}Cubic Spline Interpolation}{4}{subsection.2.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {b.1}Mathematical Approach}{4}{subsubsection.2.2.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {b.2}Example}{6}{subsubsection.2.2.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Interpolation of 5 arbitrary points using my code for cubic spline interpolation.}}{6}{figure.4}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Upper: Knots are shown in green dots, red is the actual sin(x) function and blue and green are my interpolated function and Python built-in interpolation function, respectively. Lower: Zoomed in version of the figure above. Python built-in function does a better job in cubic spline interpolation than my code.}}{7}{figure.5}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces Difference between my cubic spline interpolated values and scipy cubic interpolated values. The values are very small showing that my code works fine.}}{7}{figure.6}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {b.3}Error Analysis}{8}{subsubsection.2.2.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {c}Bilinear Interpolation}{8}{subsection.2.3}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces The red points show the knots and point P, shown in green, is where we want to calculate the value. }}{8}{figure.7}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {c.1}Mathematical Approach}{9}{subsubsection.2.3.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces The value of the function at point $P=(x,y)$ is the sum of the value of each coloured point multiplied by the area of the same colour divided by the area of ABCD rectangle to normalize it.}}{10}{figure.8}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {c.2}Example}{10}{subsubsection.2.3.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {9}{\ignorespaces Comparison between my bilinear interpolation code and scipy 2d interpolation using four points on a unit square. Left: Using my code. Right: Using scipy. The two figures are quite similar showing my code works fine.}}{10}{figure.9}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Analysis}{11}{section.3}}
\@writefile{lof}{\contentsline {figure}{\numberline {10}{\ignorespaces 15 knots and 20 points in between.}}{11}{figure.10}}
\@writefile{lof}{\contentsline {figure}{\numberline {11}{\ignorespaces 15 knots and 100 points in between.}}{12}{figure.11}}
\@writefile{lof}{\contentsline {figure}{\numberline {12}{\ignorespaces $e^{4x^2}$ function along with linear and cubic spline interpolation using both my code and scipy. The linear interpolation using my code and scipy match up exactly while the cubic spline interpolations differ.}}{12}{figure.12}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Conclusion}{13}{section.4}}
\@writefile{toc}{\contentsline {section}{\numberline {5}References}{13}{section.5}}
