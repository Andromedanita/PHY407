\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}{section.1}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Interpolation Types}{1}{section.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {a}Linear Interpolation}{1}{subsection.2.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Linear interpolation gives the value of point $C=(x_2,y_2)$.}}{2}{figure.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {a.1}Mathematical Approach}{2}{subsubsection.2.1.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {a.2}Example}{2}{subsubsection.2.1.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces The interpolated values from my code and scipy module are very similar that they go on top of one another. This included 10 knots.}}{3}{figure.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces The interpolated values from my code and scipy module are very similar that they go on top of one another. This is similar to previous figure except this is with more knots. This has 20 knots rather than 10 in the previous figure. We can see that the interpolated curves are getting closer to the function.}}{4}{figure.3}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {a.3}Error Analysis}{4}{subsubsection.2.1.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {b}Cubic Spline Interpolation}{4}{subsection.2.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {b.1}Mathematical Approach}{5}{subsubsection.2.2.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {b.2}Example}{6}{subsubsection.2.2.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Interpolation of 5 arbitrary points using my code for cubic spline interpolation.}}{6}{figure.4}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Upper: Knots are shown in green dots, red is the actual sin(x) function and blue and green are my interpolated function and Python built-in interpolation function, respectively. Lower: Zoomed in version of the figure above. Python built-in function does a better job in cubic spline interpolation.}}{7}{figure.5}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {b.3}Error Analysis}{7}{subsubsection.2.2.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {c}Bilinear Interpolation}{8}{subsection.2.3}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces The red points show the knots and point P which is where we want to calculate the value is shown by green dot. }}{8}{figure.6}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {c.1}Mathematical Approach}{8}{subsubsection.2.3.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces The value of the function at point $P=(x,y)$ is the value of each coloured point multiplied by the area of the same colour divided by the area of ABCD rectangle to normalize it.}}{9}{figure.7}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {c.2}Example}{9}{subsubsection.2.3.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces }}{10}{figure.8}}
\@writefile{toc}{\contentsline {section}{\numberline {3}References}{10}{section.3}}
